#!/bin/bash

# LawRo Contract Analyzer AWS Î∞∞Ìè¨ Ïä§ÌÅ¨Î¶ΩÌä∏
set -e

# ÏÉâÏÉÅ ÏΩîÎìú
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Î°úÍ∑∏ Ìï®Ïàò
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# ÏÇ¨Ïö©Î≤ï Ï∂úÎ†•
usage() {
    echo "ÏÇ¨Ïö©Î≤ï: $0 [OPTIONS]"
    echo ""
    echo "ÏòµÏÖò:"
    echo "  -r, --region REGION           AWS Î¶¨Ï†Ñ (Í∏∞Î≥∏Í∞í: ap-northeast-2)"
    echo "  -a, --account-id ACCOUNT_ID   AWS Í≥ÑÏ†ï ID (ÌïÑÏàò)"
    echo "  -k, --upstage-key KEY         Upstage API Key (ÌïÑÏàò)"
    echo "  -b, --bucket-name BUCKET      S3 Î≤ÑÌÇ∑ Ïù¥Î¶Ñ (Í∏∞Î≥∏Í∞í: lawro-contracts-{RANDOM})"
    echo "  -p, --project-name NAME       ÌîÑÎ°úÏ†ùÌä∏ Ïù¥Î¶Ñ (Í∏∞Î≥∏Í∞í: lawro)"
    echo "  -e, --environment ENV         ÌôòÍ≤Ω (Í∏∞Î≥∏Í∞í: production)"
    echo "  --skip-infra                  Ïù∏ÌîÑÎùº ÏÉùÏÑ± Í±¥ÎÑàÎõ∞Í∏∞"
    echo "  --skip-build                  Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Í±¥ÎÑàÎõ∞Í∏∞"
    echo "  --skip-deploy                 ÏÑúÎπÑÏä§ Î∞∞Ìè¨ Í±¥ÎÑàÎõ∞Í∏∞"
    echo "  -h, --help                    ÎèÑÏõÄÎßê Ï∂úÎ†•"
    echo ""
    echo "ÏòàÏãú:"
    echo "  $0 -a 123456789012 -k up_xxxxx -b my-lawro-bucket"
    exit 1
}

# Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï
AWS_REGION="ap-northeast-2"
PROJECT_NAME="lawro"
ENVIRONMENT="production"
SKIP_INFRA=false
SKIP_BUILD=false
SKIP_DEPLOY=false

# ÌååÎùºÎØ∏ÌÑ∞ ÌååÏã±
while [[ $# -gt 0 ]]; do
    case $1 in
        -r|--region)
            AWS_REGION="$2"
            shift 2
            ;;
        -a|--account-id)
            AWS_ACCOUNT_ID="$2"
            shift 2
            ;;
        -k|--upstage-key)
            UPSTAGE_API_KEY="$2"
            shift 2
            ;;
        -b|--bucket-name)
            S3_BUCKET_NAME="$2"
            shift 2
            ;;
        -p|--project-name)
            PROJECT_NAME="$2"
            shift 2
            ;;
        -e|--environment)
            ENVIRONMENT="$2"
            shift 2
            ;;
        --skip-infra)
            SKIP_INFRA=true
            shift
            ;;
        --skip-build)
            SKIP_BUILD=true
            shift
            ;;
        --skip-deploy)
            SKIP_DEPLOY=true
            shift
            ;;
        -h|--help)
            usage
            ;;
        *)
            log_error "Ïïå Ïàò ÏóÜÎäî ÏòµÏÖò: $1"
            usage
            ;;
    esac
done

# ÌïÑÏàò ÌååÎùºÎØ∏ÌÑ∞ ÌôïÏù∏
if [[ -z "$AWS_ACCOUNT_ID" ]]; then
    log_error "AWS Í≥ÑÏ†ï IDÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§. -a ÏòµÏÖòÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî."
    usage
fi

if [[ -z "$UPSTAGE_API_KEY" ]]; then
    log_error "Upstage API KeyÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§. -k ÏòµÏÖòÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî."
    usage
fi

# S3 Î≤ÑÌÇ∑ Ïù¥Î¶Ñ Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï (Ïú†ÎãàÌÅ¨ÌïòÍ≤å)
if [[ -z "$S3_BUCKET_NAME" ]]; then
    RANDOM_SUFFIX=$(date +%s | tail -c 6)
    S3_BUCKET_NAME="${PROJECT_NAME}-contracts-${RANDOM_SUFFIX}"
fi

# AWS CLI ÏÑ§Ïπò ÌôïÏù∏
if ! command -v aws &> /dev/null; then
    log_error "AWS CLIÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."
    exit 1
fi

# Docker ÏÑ§Ïπò ÌôïÏù∏
if ! command -v docker &> /dev/null; then
    log_error "DockerÍ∞Ä ÏÑ§ÏπòÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§."
    exit 1
fi

# Ïä§ÌÅ¨Î¶ΩÌä∏ ÏãúÏûë
log_info "üöÄ LawRo Contract Analyzer AWS Î∞∞Ìè¨ ÏãúÏûë"
log_info "ÌîÑÎ°úÏ†ùÌä∏: $PROJECT_NAME"
log_info "ÌôòÍ≤Ω: $ENVIRONMENT"
log_info "Î¶¨Ï†Ñ: $AWS_REGION"
log_info "Í≥ÑÏ†ï ID: $AWS_ACCOUNT_ID"
log_info "S3 Î≤ÑÌÇ∑: $S3_BUCKET_NAME"

# AWS Ïù∏Ï¶ù ÌôïÏù∏
log_info "AWS Ïù∏Ï¶ù ÌôïÏù∏ Ï§ë..."
aws sts get-caller-identity --region $AWS_REGION > /dev/null
log_success "AWS Ïù∏Ï¶ù ÌôïÏù∏ ÏôÑÎ£å"

# 1. Ïù∏ÌîÑÎùº ÏÉùÏÑ± (CloudFormation)
if [[ "$SKIP_INFRA" == false ]]; then
    log_info "üì¶ AWS Ïù∏ÌîÑÎùº ÏÉùÏÑ± Ï§ë..."
    
    STACK_NAME="${PROJECT_NAME}-infrastructure"
    
    # CloudFormation Ïä§ÌÉù Î∞∞Ìè¨
    aws cloudformation deploy \
        --template-file aws/cloudformation-template.yaml \
        --stack-name $STACK_NAME \
        --region $AWS_REGION \
        --capabilities CAPABILITY_NAMED_IAM \
        --parameter-overrides \
            ProjectName=$PROJECT_NAME \
            Environment=$ENVIRONMENT \
            UpstageApiKey=$UPSTAGE_API_KEY \
            S3BucketName=$S3_BUCKET_NAME
    
    if [[ $? -eq 0 ]]; then
        log_success "Ïù∏ÌîÑÎùº ÏÉùÏÑ± ÏôÑÎ£å"
    else
        log_error "Ïù∏ÌîÑÎùº ÏÉùÏÑ± Ïã§Ìå®"
        exit 1
    fi
    
    # Ïä§ÌÉù Ï∂úÎ†•Í∞í Í∞ÄÏ†∏Ïò§Í∏∞
    log_info "Ïä§ÌÉù Ï∂úÎ†•Í∞í Ï°∞Ìöå Ï§ë..."
    CHATBOT_ECR_URI=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --region $AWS_REGION \
        --query 'Stacks[0].Outputs[?OutputKey==`ChatbotECRRepository`].OutputValue' \
        --output text)
    
    CONTRACT_ANALYZER_ECR_URI=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --region $AWS_REGION \
        --query 'Stacks[0].Outputs[?OutputKey==`ContractAnalyzerECRRepository`].OutputValue' \
        --output text)
    
    CLUSTER_NAME=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --region $AWS_REGION \
        --query 'Stacks[0].Outputs[?OutputKey==`ECSClusterName`].OutputValue' \
        --output text)
    
    ALB_DNS=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --region $AWS_REGION \
        --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
        --output text)
    
    log_success "Ïä§ÌÉù Ï∂úÎ†•Í∞í Ï°∞Ìöå ÏôÑÎ£å"
else
    log_warning "Ïù∏ÌîÑÎùº ÏÉùÏÑ±ÏùÑ Í±¥ÎÑàÎúÅÎãàÎã§."
    # Í∏∞Ï°¥ Ïä§ÌÉùÏóêÏÑú Í∞í Ï°∞Ìöå
    STACK_NAME="${PROJECT_NAME}-infrastructure"
    CHATBOT_ECR_URI=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --region $AWS_REGION \
        --query 'Stacks[0].Outputs[?OutputKey==`ChatbotECRRepository`].OutputValue' \
        --output text)
    CONTRACT_ANALYZER_ECR_URI=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --region $AWS_REGION \
        --query 'Stacks[0].Outputs[?OutputKey==`ContractAnalyzerECRRepository`].OutputValue' \
        --output text)
    CLUSTER_NAME=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --region $AWS_REGION \
        --query 'Stacks[0].Outputs[?OutputKey==`ECSClusterName`].OutputValue' \
        --output text)
    ALB_DNS=$(aws cloudformation describe-stacks \
        --stack-name $STACK_NAME \
        --region $AWS_REGION \
        --query 'Stacks[0].Outputs[?OutputKey==`LoadBalancerDNS`].OutputValue' \
        --output text)
fi

# 2. Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú
if [[ "$SKIP_BUILD" == false ]]; then
    log_info "üî® Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú Ï§ë..."
    
    # ECR Î°úÍ∑∏Ïù∏
    log_info "ECRÏóê Î°úÍ∑∏Ïù∏ Ï§ë..."
    aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
    
    # Chatbot Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú
    log_info "Chatbot Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Ï§ë..."
    docker build -t $CHATBOT_ECR_URI:latest ../chatbot-docker/
    docker push $CHATBOT_ECR_URI:latest
    
    # Contract Analyzer Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú
    log_info "Contract Analyzer Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Ï§ë..."
    docker build -t $CONTRACT_ANALYZER_ECR_URI:latest .
    docker push $CONTRACT_ANALYZER_ECR_URI:latest
    
    log_success "Docker Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è Ìë∏Ïãú ÏôÑÎ£å"
else
    log_warning "Ïù¥ÎØ∏ÏßÄ ÎπåÎìúÎ•º Í±¥ÎÑàÎúÅÎãàÎã§."
fi

# 3. ECS ÏÑúÎπÑÏä§ Î∞∞Ìè¨
if [[ "$SKIP_DEPLOY" == false ]]; then
    log_info "üöÄ ECS ÏÑúÎπÑÏä§ Î∞∞Ìè¨ Ï§ë..."
    
    # Task Definition ÏóÖÎç∞Ïù¥Ìä∏
    TASK_DEF_JSON=$(cat aws/task-definition.json | \
        sed "s/{AWS_ACCOUNT_ID}/$AWS_ACCOUNT_ID/g" | \
        sed "s/{AWS_REGION}/$AWS_REGION/g" | \
        sed "s/{UPSTAGE_API_KEY}/$UPSTAGE_API_KEY/g" | \
        sed "s/{S3_BUCKET_NAME}/$S3_BUCKET_NAME/g")
    
    # Task Definition Îì±Î°ù
    TASK_DEF_ARN=$(echo "$TASK_DEF_JSON" | aws ecs register-task-definition \
        --region $AWS_REGION \
        --cli-input-json file:///dev/stdin \
        --query 'taskDefinition.taskDefinitionArn' \
        --output text)
    
    log_info "Task Definition Îì±Î°ù ÏôÑÎ£å: $TASK_DEF_ARN"
    
    # ECS ÏÑúÎπÑÏä§ ÏÉùÏÑ± ÎòêÎäî ÏóÖÎç∞Ïù¥Ìä∏
    SERVICE_NAME="${PROJECT_NAME}-service"
    
    # Í∏∞Ï°¥ ÏÑúÎπÑÏä§ ÌôïÏù∏
    if aws ecs describe-services \
        --cluster $CLUSTER_NAME \
        --services $SERVICE_NAME \
        --region $AWS_REGION \
        --query 'services[0].serviceName' \
        --output text | grep -q $SERVICE_NAME; then
        
        log_info "Í∏∞Ï°¥ ÏÑúÎπÑÏä§ ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë..."
        aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $TASK_DEF_ARN \
            --region $AWS_REGION > /dev/null
    else
        log_info "ÏÉà ÏÑúÎπÑÏä§ ÏÉùÏÑ± Ï§ë..."
        
        # ÏÑúÎ∏åÎÑ∑Í≥º Î≥¥ÏïàÍ∑∏Î£π Ï°∞Ìöå
        SUBNET_IDS=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region $AWS_REGION \
            --query 'Stacks[0].Outputs[?OutputKey==`SubnetIds`].OutputValue' \
            --output text)
        
        SECURITY_GROUP_ID=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region $AWS_REGION \
            --query 'Stacks[0].Outputs[?OutputKey==`SecurityGroupId`].OutputValue' \
            --output text)
        
        TARGET_GROUP_ARN=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region $AWS_REGION \
            --query 'Stacks[0].Outputs[?OutputKey==`TargetGroupArn`].OutputValue' \
            --output text)
        
        aws ecs create-service \
            --cluster $CLUSTER_NAME \
            --service-name $SERVICE_NAME \
            --task-definition $TASK_DEF_ARN \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}" \
            --load-balancers "targetGroupArn=$TARGET_GROUP_ARN,containerName=contract-analyzer,containerPort=8000" \
            --region $AWS_REGION > /dev/null
    fi
    
    log_success "ECS ÏÑúÎπÑÏä§ Î∞∞Ìè¨ ÏôÑÎ£å"
    
    # ÏÑúÎπÑÏä§ ÏïàÏ†ïÌôî ÎåÄÍ∏∞
    log_info "ÏÑúÎπÑÏä§ ÏïàÏ†ïÌôî ÎåÄÍ∏∞ Ï§ë... (ÏµúÎåÄ 10Î∂Ñ)"
    aws ecs wait services-stable \
        --cluster $CLUSTER_NAME \
        --services $SERVICE_NAME \
        --region $AWS_REGION
    
    log_success "ÏÑúÎπÑÏä§ ÏïàÏ†ïÌôî ÏôÑÎ£å"
else
    log_warning "ÏÑúÎπÑÏä§ Î∞∞Ìè¨Î•º Í±¥ÎÑàÎúÅÎãàÎã§."
fi

# Î∞∞Ìè¨ ÏôÑÎ£å
echo ""
log_success "üéâ Î∞∞Ìè¨ ÏôÑÎ£å!"
echo ""
echo "üìç ÏÑúÎπÑÏä§ Ï†ïÎ≥¥:"
echo "   - ALB DNS: http://$ALB_DNS"
echo "   - ECS ÌÅ¥Îü¨Ïä§ÌÑ∞: $CLUSTER_NAME"
echo "   - S3 Î≤ÑÌÇ∑: $S3_BUCKET_NAME"
echo "   - Î¶¨Ï†Ñ: $AWS_REGION"
echo ""
echo "üîß Í¥ÄÎ¶¨ Î™ÖÎ†πÏñ¥:"
echo "   - Î°úÍ∑∏ ÌôïÏù∏: aws logs tail /ecs/lawro-contract-analyzer --follow --region $AWS_REGION"
echo "   - ÏÑúÎπÑÏä§ ÏÉÅÌÉú: aws ecs describe-services --cluster $CLUSTER_NAME --services ${PROJECT_NAME}-service --region $AWS_REGION"
echo "   - Ïä§ÌÉù ÏÇ≠Ï†ú: aws cloudformation delete-stack --stack-name ${PROJECT_NAME}-infrastructure --region $AWS_REGION"
echo ""
echo "‚úÖ LawRo Contract AnalyzerÍ∞Ä AWSÏóêÏÑú Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§!" 